//medium optimal 
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0) return 0; 
        sort(nums.begin(),nums.end());
        int currele = nums[0];
        int res = 1;
        int tempres = 1 ;
        for(int i = 1; i<nums.size(); i++){
            if(nums[i] == currele){
                continue;
            }
            else if(nums[i] == (currele+1)){
                currele = nums[i];
                tempres++; 
                continue;
            }
            else if(nums[i] != currele){
                res = tempres>res ? tempres:res; 
                tempres = 1;
                currele = nums[i];

            }
        }
        return tempres>res ? tempres:res; 

    }
};


// approach 1

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int local_maxima = 1; // Initialize to 1 as at least 1 element is always consecutive
        int longest_streak = 1; // Initialize to 1 as at least 1 element is always consecutive
        
        if(nums.size()<1)   return 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] != nums[i-1]) { // Handling duplicate numbers
                if (nums[i] - nums[i-1] == 1)   local_maxima++;
                else{
                    if(local_maxima>longest_streak){
                        longest_streak=local_maxima;
                    }
                    local_maxima = 1; // Reset local_maxima for the new streak
                }
            }
        }
        // Update longest_streak in case the longest consecutive sequence ends at the last element
        if(local_maxima>longest_streak){
            longest_streak=local_maxima;
        }
        return longest_streak;
    }
};

// approach 2

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_map<int,bool> m ;
        for(auto i :nums){
            m[i]=true;
        }
        int local_len=0,res=0;
        for(auto i : nums){
            if(m[i]==true){
                local_len=1;
                int j=1;int k=1;
                m[i]=false;
                while(m[i-k] == true){
                    m[i-k]=false;
                    k++;
                    local_len++;
                }
                while(m[i+j] == true){
                    m[i+j]=false;
                    local_len++;
                    j++;
                }
                if(local_len>res) res=local_len;
            }
        }
        return res;
    }
};

// approach 3 
// similar to approach 2 (but heavier)
// same same but diffland :p

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_map<int,bool> m ;
        for(auto i :nums){
            m[i]=true;
        }
        int local_len=0,res=0;
        for(auto i : nums){
            if(m[i]==true){
                local_len = 1;
                int j=1,k=1;
                m.erase(i);
                while(m[i-k] == true){
                    m.erase(i-k);
                    k++;
                    local_len++;
                }
                while(m[i+j] == true){
                    m.erase(i+j);
                    j++;
                    local_len++;
                }
                if(local_len>res) res=local_len;
            }
        }
        return res;
    }
};