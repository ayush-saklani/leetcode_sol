/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* root, TreeNode* subRoot){
        if(!root && !subRoot)   return true;
        else if(root==NULL || subRoot==NULL)    return false;
        if(root->val!=subRoot->val) return false;
        bool right = check(root->right,subRoot->right);
        bool left = check(root->left,subRoot->left);
        if(right==true && left==true) return true;
        else return false;
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if((root==NULL && subRoot==NULL) || subRoot==NULL) return true;
        else if(root==NULL || subRoot==NULL) return false;

        if(check(root,subRoot)){
            return true;
        } 
        else{
            bool right = isSubtree(root->right, subRoot);
            bool left  = isSubtree(root->left , subRoot);
            if(right==true||left==true){
                return true;
            }
            else return false;
        }
        return false;
    }
};