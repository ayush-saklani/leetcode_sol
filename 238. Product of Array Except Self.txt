//approach 1

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> fromBegin(n);
        fromBegin[0]=1;
        vector<int> fromLast(n);
        fromLast[0]=1;
        
        for(int i=1;i<n;i++){
            fromBegin[i]=fromBegin[i-1]*nums[i-1];
            fromLast[i]=fromLast[i-1]*nums[n-i];
        }
        
        vector<int> res(n);
        for(int i=0;i<n;i++){
            res[i]=fromBegin[i]*fromLast[n-1-i];
        }
        return res;
    }
};

//approach 2 wrong due to constraits
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        long flag = 0;
        long temp = 1;
        for (int i = 0 ;i<nums.size();i++){
            if(nums[i]==0) flag++;
            else temp=temp*nums[i];
        }
        if(flag>1)  fill(nums.begin(),nums.end(),0);  
        else{
            for(int i = 0 ;i<nums.size();i++){
                if(nums[i]==0 && flag == 1){
                    fill(nums.begin(),nums.end(),0);
                    nums[i]=temp;
                    break;
                }
                else{
                    nums[i]=temp/nums[i];
                }
            }
        }
        return nums;
    }
};