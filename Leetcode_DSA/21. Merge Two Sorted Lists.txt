// approach 1 // Lazy code approch 2 is far far better

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * res = new ListNode(); 
        ListNode * temp = res; 
        while(list1!=NULL && list2!=NULL){
            ListNode * node = new ListNode();
            if(list1->val <= list2->val){
                node->val=list1->val;
                list1=list1->next;
            }
            else{
                node->val=list2->val;
                list2=list2->next;
            }
            temp->next=node;
            temp=temp->next;
        }
        while(list2!=NULL){
            ListNode * node = new ListNode();
            node->val=list2->val;
            list2=list2->next;
            temp->next=node;
            temp=temp->next;
        }
        while(list1!=NULL){
            ListNode * node = new ListNode();
            node->val=list1->val;
            list1=list1->next;
            temp->next=node;
            temp=temp->next;
        }
        res=res->next;
        return res;
    }
};


// approach 2 // better code

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * res = new ListNode(); 
        ListNode * temp = res; 
        while(list1!=NULL && list2!=NULL){
            if(list1->val <= list2->val){
                temp->next=list1;
                list1=list1->next;
            }
            else{
                temp->next=list2;
                list2=list2->next;
            }
            temp=temp->next;
        }
        if(list2!=NULL){
            temp->next=list2;
        }
        else if(list1!=NULL){
            temp->next=list1;
        }
        return res->next; // first node is temporary and it will be empty
    }
};