class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int m = maze.size();
        int n = maze[0].size();

        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<vector<int>> direc = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        visited[entrance[0]][entrance[1]] = true;

        int distance = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                auto [fx, fy] = q.front();
                q.pop();
                if ((fx != entrance[0] || fy != entrance[1]) &&
                    (fx == 0 || fy == 0 || fx == m - 1 || fy == n - 1)) {
                    return distance;
                }
                for (auto& it : direc) {
                    int x = fx + it[0];
                    int y = fy + it[1];
                    if (x >= 0 && y >= 0 && x < m && y < n &&
                        maze[x][y] == '.' && !visited[x][y]) {
                        q.push({x, y});
                        visited[x][y] = true;
                    }
                }
            }
            distance++;
        }
        return -1;
    }
};