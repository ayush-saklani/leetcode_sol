class Solution {
public:
    bool bfs(int row, int col, vector<vector<int>>& land) {
        queue<pair<int, int>> q;
        vector<vector<int>> visited(row, vector<int>(col, 0));

        for (int i = 0; i < col; i++) {
            if (land[0][i] == 0) {
                q.push({0, i});
                visited[0][i] = 1;
            }
        }

        vector<vector<int>> direc = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        while (!q.empty()) {
            auto [cx, cy] = q.front();
            q.pop();

            if (cx == row - 1)
                return true;

            for (auto& d : direc) {
                int x = cx + d[0];
                int y = cy + d[1];
                if (x >= 0 && x < row && y >= 0 && y < col) {
                    if (!visited[x][y] && land[x][y] == 0) {
                        visited[x][y] = 1;
                        q.push({x, y});
                    }
                }
            }
        }
        return false;
    }
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        int l = 1, r = cells.size(), res = 0;
        while (l <= r) {
            int mid = (l + r) / 2;

            vector<vector<int>> land(row, vector<int>(col, 0));
            for (int i = 0; i < mid; i++) {
                land[cells[i][0] - 1][cells[i][1] - 1] = 1;
            }
            if (bfs(row, col, land)) {
                res = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return res;
    }
};
