class Solution {
public:
    // vector<int> d1 = {-1, -1, -1, 0,  0, 1, 1,  1};  // for 8 direction
    // vector<int> d2 = { 1,  0, -1, 1, -1, 1, 0, -1};  // for 8 direction
    vector<int> d1 = { 0, 1,  0,-1};                    // for 4 direction
    vector<int> d2 = { 1, 0, -1, 0};                    // for 4 direction
    bool isvalid(vector<vector<char>>& grid,vector<vector<bool>>& visited, int x, int y, int m, int n) {
        if (x < 0 || x >= m || y < 0 || y >= n || (grid[x][y] == '0')){
            return false;
        }
        return !visited[x][y];
    }
    void bfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int m, int n) {
        visited[i][j] = true;
        for (int it = 0; it < d1.size(); it++) {
            if (isvalid(grid,visited, (i+d1[it]), (j+d2[it]), m, n)){
                bfs(grid, visited, (i + d1[it]), (j + d2[it]), m, n);
            }
        }
        return;
    }
    int numIslands(vector<vector<char>>& grid) {
        int res = 0;
        int m = grid.size(), n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && visited[i][j] == false) {
                    bfs(grid, visited, i, j, m, n);
                    res ++;
                }
            }
        }
        return res;
    }
};