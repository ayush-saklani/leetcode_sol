class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend == divisor) return 1;
        long sign = 1;
        if(dividend >= 0 && divisor<0) sign = -1;
        else if(dividend <=0 && divisor>0) sign = -1;
        long n = abs(dividend);
        long d = abs(divisor);
        long ans = 0;
        while(n>=d){
            int counter = 0;
            while(n>=(d<<(counter+1))){ //d*2^(counter+1)
                counter++;
            }
            ans = ans + (1<<counter);   //d*2^(counter) this mant d's can be removed
            n = n - (d<<counter); 
        }
        if(ans==(1<<31) && sign == 1)  return INT_MAX;
        else if(ans==(1<<31) && sign == -1)  return INT_MIN;
        return (sign == -1) ? (ans*sign) : ans;
    }
};