class Solution {
public:
    // Dijkstra Algorithm
    double maxProbability2(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        unordered_map<int, vector<pair<int, double>>> m;
        // converting it into directed graph
        for (int i = 0; i < edges.size(); i++) {
            m[edges[i][0]].push_back({edges[i][1], succProb[i]});
            m[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        vector<double> visited(n, 0.0);

        visited[start_node] = 1.0;
        pq.push({1.0, start_node});

        while (!pq.empty()) {
            auto front = pq.top();
            pq.pop();
            int node = front.second;
            double wt = front.first;
            for (auto itr : m[node]) {
                double new_wt = wt * itr.second;
                if (new_wt > visited[itr.first]) {
                    visited[itr.first] = new_wt;
                    pq.push({new_wt, itr.first});
                }
            }
        }
        return visited[end_node];
    }
    // bellman ford algo
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<double> res(n, 0.0);
        res[start_node] = 1.0;
        for (int j = 0; j < n - 1; j++) {
            bool updated = false;
            for (int i = 0; i < edges.size(); i++) {
                int u = edges[i][0];
                int v = edges[i][1];
                double wt = succProb[i];

                // Relax both directions 
                // (i tried converting it into directed graph but memory overloaded so this)
                if (res[u] * wt > res[v]) {
                    res[v] = res[u] * wt;
                    updated = true;
                }
                if (res[v] * wt > res[u]) {
                    res[u] = res[v] * wt;
                    updated = true;
                }
            }
            if (!updated) break; // optimization â€” early exit if no change
        }
        return res[end_node];
    }
};