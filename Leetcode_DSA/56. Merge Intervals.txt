class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        for (int i = 0; i < intervals.size(); i++) {
            if ((i + 1) < intervals.size() && intervals[i + 1][0] <= intervals[i][1]) {
                if (intervals[i + 1][1] > intervals[i][1]) {
                    intervals[i][1] = intervals[i + 1][1];
                    intervals.erase(intervals.begin() + i + 1);
                    i--;
                } else if (intervals[i + 1][1] <= intervals[i][1]) {
                    intervals.erase(intervals.begin() + i + 1);
                    i--;
                }
            }
        }
        return intervals;
    }
};  


/// best approach is this v
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        res.push_back(intervals[0]);
        for (int i = 1; i < intervals.size(); i++) {
            if (intervals[i][0] <= res.back()[1]) {
                if (intervals[i][1] > res.back()[1]) {
                    res.back()[1] = intervals[i][1];
                }
            }else{
                res.push_back(intervals[i]);
            }
        }
        return res;
    }
};