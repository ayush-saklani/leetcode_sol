class Solution {
public:
    unordered_map<long,long> dp;
    long long solve(vector<int>& nums,int i,int pi){
        int n = nums.size();
        if(i>=n) return 0;

        long long key = (pi%2 == 0)? i : i*-1;
        if (dp.count(key)) return dp[key];
        
        long long skip = solve(nums,i+1,pi);
        long long take = solve(nums,i+1,pi+1);
        if(pi%2 == 0){
            take = take + nums[i];
        }else{
            take = take - nums[i];
        }
        return dp[key] = max(skip,take);

    }
    long long maxAlternatingSum(vector<int>& nums) {
        return solve(nums,0,0);
    }
};