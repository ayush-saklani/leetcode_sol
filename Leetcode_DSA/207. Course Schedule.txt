class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        unordered_map<int, vector<int>> gp;
        vector<int> indegree(numCourses, 0);

        for (auto& pre : prerequisites) {
            int course = pre[0];
            int prereq = pre[1];
            gp[prereq].push_back(course);
            indegree[course]++;   // count prerequisites
        }

        queue<int> q;
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {  // starting nodes with no prerequisites
                q.push(i);
            }
        }

        int taken = 0;
        while (!q.empty()) {
            int front = q.front();
            q.pop();
            taken++;

            for (int nei : gp[front]) {
                indegree[nei]--;      // remove one prereq
                if (indegree[nei] == 0) {
                    q.push(nei);
                }
            }
        }

        return taken == numCourses;
    }
};
