class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();

        vector<vector<char>> res(m, (vector<char>(n, 'X')));
        queue<pair<int, int>> q;

        for (int i = 0; i < n; i++) {
            if (board[0][i] == 'O') {
                q.push({0, i});
                res[0][i] = 'O';
            }
            if (board[m - 1][i] == 'O') {
                q.push({m - 1, i});
                res[m - 1][i] = 'O';
            }
        }
        for (int j = 0; j < m; j++) {
            if (board[j][0] == 'O') {
                q.push({j, 0});
                res[j][0] = 'O';
            }
            if (board[j][n - 1] == 'O') {
                q.push({j, n - 1});
                res[j][n - 1] = 'O';
            }
        }
        vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!q.empty()) {
            int size = q.size();
            while (size) {
                for (auto it : directions) {
                    int x = q.front().first + it[0];
                    int y = q.front().second + it[1];
                    if (x >= 0 && y >= 0 && x < m && y < n &&
                        board[x][y] == 'O' && res[x][y] == 'X') {
                        q.push({x, y});
                        res[x][y] = 'O';
                    }
                }
                size--;
                q.pop();
            }
        }

        board = res;
    }
};