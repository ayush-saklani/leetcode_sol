class Solution {
public:
    int areabloomer(vector<vector<int>>& grid, vector<vector<int>>& visited,
                 int i, int j, int m, int n) {
        int area = 1;
        visited[i][j] = 1;
        
        if (i < m - 1 && visited[i + 1][j] == 0 && grid[i + 1][j] == 1) {
            area = area + areabloomer(grid, visited, i + 1, j, m, n);
        }
        if (i > 0 && visited[i - 1][j] == 0 && grid[i - 1][j] == 1) {
            area = area + areabloomer(grid, visited, i - 1, j, m, n);
        }
        if (j < n - 1 && visited[i][j + 1] == 0 && grid[i][j + 1] == 1) {
            area = area + areabloomer(grid, visited, i, j + 1, m, n);
        }
        if (j > 0 && visited[i][j - 1] == 0 && grid[i][j - 1] == 1) {
            area = area + areabloomer(grid, visited, i, j - 1, m, n);
        }
        return area;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int res = 0;
        int m = grid.size(), n = grid[0].size();

        vector<vector<int>> visited(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && visited[i][j] == 0) {
                    int area = areabloomer(grid, visited, i, j, m, n);
                    res = res > area ? res : area ;
                }
            }
        }
        return res;
    }
};