class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<vector<pair<int, int>>> g(n + 1);
        for (auto i : times) {
            g[i[0]].push_back({i[1], i[2]});
        }
        vector<int> res(n + 1, INT_MAX);
        pq.push({0, k});
        res[k] = 0;
        while (!pq.empty()) {
            int distance = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for (auto& it : g[node]) {
                int adjnode = it.first;
                int weight = it.second;
                if (weight + distance < res[adjnode]) {
                    res[adjnode] = weight + distance;
                    pq.push({weight + distance, adjnode});
                }
            }
        }
        int maxi = 0;
        for (int i = 1; i <= n; i++) {
            if (res[i] == INT_MAX){
                return -1;
            }
            maxi = max(maxi, res[i]);
        }
        return maxi;
    }
};