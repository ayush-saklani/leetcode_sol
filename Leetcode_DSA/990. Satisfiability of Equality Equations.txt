class Solution {
public:
    vector<int> parent, rankv;
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // path compression
        }
        return parent[x];
    }
    void unionx(int x, int y) {
        int par_x = find(x);
        int par_y = find(y);
        if (par_x == par_y) return;

        if (rankv[par_x] < rankv[par_y]) {
            parent[par_x] = par_y;
        } else if (rankv[par_x] > rankv[par_y]) {
            parent[par_y] = par_x;
        } else {
            parent[par_y] = par_x;
            rankv[par_x]++;
        }
    }
    bool equationsPossible(vector<string>& equations) {
        parent.resize(26);
        rankv.resize(26, 0);
        for (int i = 0; i < 26; i++) parent[i] = i;

        for (auto& eq : equations) {        // Step 1: union all "==" pairs
            if (eq[1] == '=') {
                int a = eq[0] - 'a';
                int b = eq[3] - 'a';
                unionx(a, b);
            }
        }

        for (auto& eq : equations) {        // Step 2: check all "!=" pairs
            if (eq[1] == '!') {
                int a = eq[0] - 'a';
                int b = eq[3] - 'a';
                if (find(a) == find(b)) return false;
            }
        }
        return true;
    }
};
